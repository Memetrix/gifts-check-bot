import os
import asyncio
import traceback
from datetime import datetime, timedelta, timezone
from telebot import TeleBot, types
from telethon import TelegramClient
from telethon.tl.types import InputUser
from get_user_star_gifts_request import GetUserStarGiftsRequest
from db import is_approved, save_approved, get_approved_user

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
chat_id = int(os.getenv("CHAT_ID"))
session_file = "cleaner-service/sessions/userbot_session"
channel_id = int(os.getenv("CHANNEL_ID", 2608127062))  # @narrator –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

bot = TeleBot(bot_token)
bot.skip_pending = True

# –ü–æ–ª—É—á–µ–Ω–∏–µ knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤
def check_knockdowns(user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> (int, str):
    async def run():
        async with TelegramClient(session_file, api_id, api_hash) as client:
            try:
                await client.get_dialogs()

                # 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ user_id
                try:
                    entity = await client.get_input_entity(user_id)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ user_id: {user_id}")
                except Exception as e_id:
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ user_id: {e_id}")

                    # 2. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ username
                    if username:
                        try:
                            entity = await client.get_input_entity(f"@{username}")
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ username: @{username}")
                        except Exception as e_username:
                            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ username: {e_username}")
                            entity = None
                    else:
                        entity = None

                    # 3. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —á–µ—Ä–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
                    if not entity and (first_name or last_name):
                        print(f"üîç –ò—â—É –ø–æ –∏–º–µ–Ω–∏: {first_name} {last_name} –≤ –∫–∞–Ω–∞–ª–µ...")
                        try:
                            async for user in client.iter_participants(channel_id, search=first_name or ""):
                                if user.first_name == first_name and user.last_name == last_name:
                                    entity = InputUser(user.id, user.access_hash)
                                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏: {first_name} {last_name}")
                                    break
                        except Exception as e_name:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∏–º–µ–Ω–∏: {e_name}")

                if not entity:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity: {user_id}")
                    return -1, None

                # –°–±–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
                count = 0
                offset = ""
                while True:
                    result = await client(GetUserStarGiftsRequest(user_id=entity, offset=offset, limit=100))
                    for g in result.gifts:
                        data = g.to_dict()
                        gift = data.get("gift")
                        if gift:
                            for attr in gift.get("attributes", []):
                                if "name" in attr and attr["name"].lower() == "knockdown":
                                    count += 1
                                    break
                    if not result.next_offset:
                        break
                    offset = result.next_offset

                return count, getattr(entity, "username", None)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_knockdowns: {e}")
                return -1, None
    return asyncio.run(run())

# /start
@bot.message_handler(commands=["start"])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="check_gifts"))
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–Ω–∏–º—É–º 6 knockdown‚Äë–ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "check_gifts")
def handle_check(call):
    user_id = call.from_user.id
    username = call.from_user.username
    first_name = call.from_user.first_name
    last_name = call.from_user.last_name
    now = datetime.now(timezone.utc)

    user = get_approved_user(user_id)

    if user:
        invite_link = user[2]
        created_at = user[3]
        count, _ = check_knockdowns(user_id, username, first_name, last_name)

        if count < 6:
            bot.send_message(call.message.chat.id,
                "‚ùå –†–∞–Ω–µ–µ —Ç—ã –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –º–µ–Ω—å—à–µ 6 knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        if invite_link and created_at and (now - created_at) < timedelta(minutes=15):
            bot.send_message(call.message.chat.id,
                f"üîÅ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite_link}")
            return

        try:
            invite = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
            bot.send_message(call.message.chat.id,
                f"üîÅ –¢—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É! –í–æ—Ç –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n{invite.invite_link}")
            save_approved(user_id, username, count, invite.invite_link)
            return
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")
            return

    # –ü–µ—Ä–≤—ã–π —Ä–∞–∑
    try:
        count, _ = check_knockdowns(user_id, username, first_name, last_name)
        if count >= 6:
            invite = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
            bot.send_message(call.message.chat.id,
                f"‚úÖ –£ —Ç–µ–±—è {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!\n"
                f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite.invite_link}")
            save_approved(user_id, username, count, invite.invite_link)
        else:
            bot.send_message(call.message.chat.id,
                f"‚ùå –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞ @mrkt.")
    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        traceback.print_exc()

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
bot.infinity_polling(timeout=10, long_polling_timeout=5)
