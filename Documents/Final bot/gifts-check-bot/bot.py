import os
import time
import telebot
import asyncio
import traceback
from telethon import TelegramClient
from telethon.tl.types import InputUser, InputUserSelf
from get_user_star_gifts_request import GetUserStarGiftsRequest

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
chat_id = int(os.getenv("CHAT_ID", "-1002655130461"))
session_file = "userbot_session"

bot = telebot.TeleBot(bot_token)
bot.skip_pending = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤
def check_knockdowns(user_id: int) -> int:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    async def run():
        async with TelegramClient(session_file, api_id, api_hash) as client:
            try:
                await client.get_dialogs()
                entity = await client.get_input_entity(user_id)
                if not isinstance(entity, InputUser):
                    entity = InputUser(entity.user_id, entity.access_hash)
            except ValueError:
                # ‚õ≥ userbot —Å–∞–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await client.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ–∏ –ø–æ–¥–∞—Ä–∫–∏‚Ä¶")
                    await asyncio.sleep(2)
                    entity = await client.get_input_entity(user_id)
                    if not isinstance(entity, InputUser):
                        entity = InputUser(entity.user_id, entity.access_hash)
                except Exception:
                    return -1

            result = await client(GetUserStarGiftsRequest(user_id=entity, offset="", limit=100))
            count = 0
            for g in result.gifts:
                data = g.to_dict()
                gift_data = data.get("gift")
                if not gift_data or "title" not in gift_data or "slug" not in gift_data:
                    continue
                for attr in gift_data.get("attributes", []):
                    if "name" in attr and attr["name"].lower() == "knockdown":
                        count += 1
                        break
            return count

    return loop.run_until_complete(run())

# –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª?
def is_already_approved(user_id: int) -> bool:
    try:
        if not os.path.exists("approved_users.txt"):
            return False
        with open("approved_users.txt", "r") as f:
            return str(user_id) in f.read()
    except Exception:
        return False

# –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id
def save_approved(user_id: int):
    try:
        with open("approved_users.txt", "a") as f:
            f.write(str(user_id) + "\n")
    except Exception:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å user_id")

# /start
@bot.message_handler(commands=["start"])
def start_message(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="check_self"))
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–Ω–∏–º—É–º 6 knockdown‚Äë–ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ\n"
                     "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
                     reply_markup=markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
@bot.callback_query_handler(func=lambda call: call.data == "check_self")
def handle_check(call):
    user_id = call.from_user.id

    if is_already_approved(user_id):
        bot.send_message(call.message.chat.id,
            "‚úÖ –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–µ –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        return

    try:
        count = check_knockdowns(user_id)

        if count == -1:
            bot.send_message(call.message.chat.id,
                "‚ùóÔ∏èTelegram –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –º–Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                "–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.")
            return

        if count >= 6:
            invite = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
            bot.send_message(call.message.chat.id,
                f"‚úÖ –£ —Ç–µ–±—è {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!\n"
                f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É:\n{invite.invite_link}")
            save_approved(user_id)
        else:
            bot.send_message(call.message.chat.id,
                f"‚ùå –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –∏—Ö —Å–∫—Ä—ã–ª –∏–ª–∏ —É —Ç–µ–±—è –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–∫—É–ø–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞ @mrkt.")

    except Exception:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        traceback.print_exc()

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç...")
bot.infinity_polling(timeout=10, long_polling_timeout=5)
