import os
import asyncio
import traceback
import telebot
from telethon import TelegramClient
from telethon.tl.types import InputUser, PeerChannel
from get_user_star_gifts_request import GetUserStarGiftsRequest
from db import is_approved, save_approved

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
chat_id = int(os.getenv("CHAT_ID", "-1002655130461"))
channel_id = int(os.getenv("CHANNEL_ID", "2608127062"))  # ID @narrator
session_file = "userbot_session"

bot = telebot.TeleBot(bot_token)
bot.skip_pending = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ iter_participants
def check_knockdowns_from_channel(user_id: int) -> (int, str):
    async def run():
        async with TelegramClient(session_file, api_id, api_hash) as client:
            try:
                channel = PeerChannel(channel_id)

                # –†–∞–∑–æ–≥—Ä–µ–≤
                await client.get_participants(channel, limit=0)

                user = None
                total_checked = 0

                async for participant in client.iter_participants(channel, aggressive=True):
                    total_checked += 1
                    if participant.id == user_id:
                        user = participant
                        break

                print(f"üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_checked}")

                if not user:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                    return -2, None

                entity = InputUser(user.id, user.access_hash)

                result = await client(GetUserStarGiftsRequest(user_id=entity, offset="", limit=100))
                count = 0
                for g in result.gifts:
                    data = g.to_dict()
                    gift_data = data.get("gift")
                    if not gift_data or "title" not in gift_data or "slug" not in gift_data:
                        continue
                    for attr in gift_data.get("attributes", []):
                        if "name" in attr and attr["name"].lower() == "knockdown":
                            count += 1
                            break

                print(f"üéÅ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞–π–¥–µ–Ω–æ knockdown: {count}")
                return count, user.username
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª:", e)
                return -1, None

    return asyncio.run(run())

# /start
@bot.message_handler(commands=["start"])
def start_message(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="check_self"))
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–Ω–∏–º—É–º 6 knockdown‚Äë–ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @narrator ‚Äî –∏–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É —Ç–µ–±—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.",
        reply_markup=markup)

# –ö–Ω–æ–ø–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "check_self")
def handle_check(call):
    user_id = call.from_user.id

    if is_approved(user_id):
        bot.send_message(call.message.chat.id,
            "‚úÖ –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–µ –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        return

    try:
        count, username = check_knockdowns_from_channel(user_id)

        if count == -2:
            bot.send_message(call.message.chat.id,
                "‚ùóÔ∏è–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª @narrator. –Ø –Ω–µ –º–æ–≥—É —Ç–µ–±—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.")
            return

        if count == -1:
            bot.send_message(call.message.chat.id,
                "‚ö†Ô∏è Telegram –Ω–µ –¥–∞–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return

        if count >= 6:
            invite = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
            bot.send_message(call.message.chat.id,
                f"‚úÖ –£ —Ç–µ–±—è {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!\n"
                f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É:\n{invite.invite_link}")
            save_approved(user_id, username, count)
        else:
            bot.send_message(call.message.chat.id,
                f"‚ùå –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–∫—É–ø–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞ @mrkt.")
    except Exception:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        traceback.print_exc()

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç...")
bot.infinity_polling(timeout=10, long_polling_timeout=5)
