import os
import asyncio
import traceback
import threading
from datetime import datetime, timedelta, timezone
from telebot import TeleBot, types
from telethon import TelegramClient, functions
from telethon.tl.types import InputUser
from get_user_star_gifts_request import GetUserStarGiftsRequest
from db import is_approved, save_approved, get_approved_user

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
chat_id = int(os.getenv("CHAT_ID"))
session_file = "cleaner-service/sessions/userbot2"
DELAY = 1.5

bot = TeleBot(bot_token)
bot.skip_pending = True

main_loop = asyncio.new_event_loop()
asyncio.set_event_loop(main_loop)
check_queue = asyncio.Queue()

# –ö—ç—à –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ @narrator
subscribers_cache = set()

async def preload_narrator_subscribers():
    async with TelegramClient(session_file, api_id, api_hash) as client:
        async for user in client.iter_participants("@narrator"):
            subscribers_cache.add(user.id)
    print(f"üë• –ö—ç—à @narrator –∑–∞–≥—Ä—É–∂–µ–Ω: {len(subscribers_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
async def is_user_in_group(user_id: int) -> bool:
    async with TelegramClient(session_file, api_id, api_hash) as client:
        try:
            await client.get_dialogs()
            await client(functions.channels.GetParticipantRequest(
                channel=chat_id,
                participant=user_id
            ))
            return True
        except:
            return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤ (ASYNC!)
async def check_knockdowns(user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> (int, str):
    async with TelegramClient(session_file, api_id, api_hash) as client:
        try:
            await client.get_dialogs()
            entity = None
            try:
                entity = await client.get_input_entity(user_id)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ user_id: {user_id}")
            except Exception as e1:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ user_id: {e1}")
                if username:
                    try:
                        entity = await client.get_input_entity(f"@{username}")
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ username: @{username}")
                    except Exception as e2:
                        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ username: {e2}")
            if entity is None and first_name and last_name:
                async for user in client.iter_participants(chat_id):
                    if user.first_name == first_name and user.last_name == last_name:
                        entity = await client.get_input_entity(user.id)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏: {first_name} {last_name}")
                        break
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏: {first_name} {last_name}")

            if not entity:
                return -1, None

            if not isinstance(entity, InputUser):
                entity = InputUser(entity.user_id, entity.access_hash)

            count = 0
            offset = ""
            while True:
                result = await client(GetUserStarGiftsRequest(user_id=entity, offset=offset, limit=100))
                for g in result.gifts:
                    gift = g.to_dict().get("gift")
                    if not gift:
                        continue
                    for attr in gift.get("attributes", []):
                        if "name" in attr and attr["name"].lower() == "knockdown":
                            count += 1
                            break
                if not result.next_offset:
                    break
                offset = result.next_offset

            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user_id} ‚Üí {count} knockdown")
            return count, getattr(entity, "username", None)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return -1, None

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="check_gifts"))
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–Ω–∏–º—É–º 6 knockdown‚Äë–ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=markup)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_gifts")
def handle_check(call):
    user_id = call.from_user.id
    if user_id not in subscribers_cache:
        bot.send_message(call.message.chat.id,
            "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @narrator –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")
        return

    asyncio.run_coroutine_threadsafe(check_queue.put(call), main_loop)
    bot.send_message(call.message.chat.id,
        "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ ‚Äî —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
async def process_check_queue():
    while True:
        call = await check_queue.get()
        try:
            user_id = call.from_user.id
            username = call.from_user.username
            first_name = call.from_user.first_name
            last_name = call.from_user.last_name
            now = datetime.now(timezone.utc)

            if await is_user_in_group(user_id):
                bot.send_message(call.message.chat.id, "‚úÖ –¢—ã —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ! –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.")
                await asyncio.sleep(DELAY)
                continue

            user = get_approved_user(user_id)
            if user:
                invite_link = user[2]
                created_at = user[3]
                count, _ = await check_knockdowns(user_id, username, first_name, last_name)

                if count < 6:
                    bot.send_message(call.message.chat.id,
                        "‚ùå –†–∞–Ω–µ–µ —Ç—ã –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –º–µ–Ω—å—à–µ 6 knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.")
                    await asyncio.sleep(DELAY)
                    continue

                if invite_link and created_at:
                    if created_at.tzinfo is None:
                        created_at = created_at.replace(tzinfo=timezone.utc)
                    if (now - created_at) < timedelta(minutes=15):
                        bot.send_message(call.message.chat.id,
                            f"üîÅ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite_link}")
                        await asyncio.sleep(DELAY)
                        continue

                try:
                    invite = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
                    bot.send_message(call.message.chat.id,
                        f"üîÅ –¢—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É! –í–æ—Ç –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n{invite.invite_link}")
                    save_approved(user_id, username, count, invite.invite_link)
                    await asyncio.sleep(DELAY)
                    continue
                except Exception as e:
                    bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")
                    await asyncio.sleep(DELAY)
                    continue

            count, _ = await check_knockdowns(user_id, username, first_name, last_name)
            if count >= 6:
                invite = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
                bot.send_message(call.message.chat.id,
                    f"‚úÖ –£ —Ç–µ–±—è {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!\n"
                    f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite.invite_link}")
                save_approved(user_id, username, count, invite.invite_link)
            else:
                bot.send_message(call.message.chat.id,
                    f"‚ùå –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞ @mrkt.")
        except Exception as e:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            traceback.print_exc()
        await asyncio.sleep(DELAY)

# –°—Ç–∞—Ä—Ç loop-–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
def start_async_loop():
    main_loop.create_task(preload_narrator_subscribers())
    main_loop.create_task(process_check_queue())
    main_loop.run_forever()

threading.Thread(target=start_async_loop, daemon=True).start()

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –æ—á–µ—Ä–µ–¥—å—é –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
bot.infinity_polling(timeout=10, long_polling_timeout=5)