import os
import asyncio
import traceback
import telebot
from telethon import TelegramClient
from telethon.tl.types import InputUser
from get_user_star_gifts_request import GetUserStarGiftsRequest
from db import is_approved, save_approved

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
chat_id = int(os.getenv("CHAT_ID", "-1002655130461"))
session_file = "userbot_session"

bot = telebot.TeleBot(bot_token)
bot.skip_pending = True

# /start
@bot.message_handler(commands=["start"])
def start_message(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="check_gifts"))
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–Ω–∏–º—É–º 6 knockdown‚Äë–ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤
def check_knockdowns(user_id: int) -> (int, str):
    async def run():
        async with TelegramClient(session_file, api_id, api_hash) as client:
            try:
                await client.get_dialogs()
                entity = await client.get_input_entity(user_id)
                if not isinstance(entity, InputUser):
                    entity = InputUser(entity.user_id, entity.access_hash)

                result = await client(GetUserStarGiftsRequest(user_id=entity, offset="", limit=100))
                count = 0
                for g in result.gifts:
                    data = g.to_dict()
                    gift_data = data.get("gift")
                    if not gift_data or "title" not in gift_data or "slug" not in gift_data:
                        continue
                    for attr in gift_data.get("attributes", []):
                        if "name" in attr and attr["name"].lower() == "knockdown":
                            count += 1
                            break

                return count, getattr(entity, "username", None)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                return -1, None

    return asyncio.run(run())

# –ö–Ω–æ–ø–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "check_gifts")
def handle_check(call):
    user_id = call.from_user.id

    if is_approved(user_id):
        bot.send_message(call.message.chat.id,
            "‚úÖ –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–µ –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        return

    try:
        count, username = check_knockdowns(user_id)

        if count == -1:
            bot.send_message(call.message.chat.id,
                "‚ùóÔ∏èTelegram –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –º–Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
                "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @narrator –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –ª–∏—á–∫—É.")
            return

        if count >= 6:
            invite = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
            bot.send_message(call.message.chat.id,
                f"‚úÖ –£ —Ç–µ–±—è {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!\n"
                f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite.invite_link}")
            save_approved(user_id, username, count)
        else:
            bot.send_message(call.message.chat.id,
                f"‚ùå –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–∫—É–ø–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞ @mrkt.")
    except Exception:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        traceback.print_exc()

# üìä /sumgifts ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ knockdown —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@bot.message_handler(commands=["sumgifts"])
def handle_sumgifts(message):
    user_id = message.from_user.id
    chat_id_tg = message.chat.id

    bot.send_message(chat_id_tg, "üîÑ –°—á–∏—Ç–∞—é –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

    async def run():
        total = 0
        async with TelegramClient(session_file, api_id, api_hash) as client:
            group = await client.get_entity(chat_id)
            async for user in client.iter_participants(group):
                try:
                    entity = InputUser(user.id, user.access_hash)
                    result = await client(GetUserStarGiftsRequest(user_id=entity, offset="", limit=100))
                    for g in result.gifts:
                        data = g.to_dict()
                        for attr in data["gift"].get("attributes", []):
                            if "name" in attr and attr["name"].lower() == "knockdown":
                                total += 1
                                break
                except:
                    continue

        bot.send_message(chat_id_tg, f"üéÅ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤: {total}")

    asyncio.run(run())

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Å—á–∏—Ç–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏")
bot.infinity_polling(timeout=10, long_polling_timeout=5)
