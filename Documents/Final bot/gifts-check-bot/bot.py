import os, asyncio, traceback, threading, logging, time
from datetime import datetime, timedelta, timezone
from telebot import TeleBot, types
from telethon import TelegramClient, functions
from telethon.tl.types import InputUser
from get_user_star_gifts_request import GetUserStarGiftsRequest
from db import is_approved, save_approved, get_approved_user

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
api_id   = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
chat_id   = int(os.getenv("CHAT_ID"))
session_file = "cleaner-service/sessions/userbot2"
DELAY = 1.5
CLICK_COOLDOWN = 10

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("giftbot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TeleBot (1 –ø–æ—Ç–æ–∫ ‚Üí –Ω–µ—Ç 409) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = TeleBot(bot_token, num_threads=1)
bot.skip_pending = True

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ asyncio loop + userbot ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
main_loop = asyncio.new_event_loop()
asyncio.set_event_loop(main_loop)

user_client: TelegramClient | None = None
check_queue: asyncio.Queue = asyncio.Queue()

async def init_userbot():
    global user_client
    user_client = TelegramClient(session_file, api_id, api_hash)
    await user_client.start()
    await user_client.get_dialogs()
    log.info("üë§ Userbot session –≥–æ—Ç–æ–≤–∞")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def is_user_in_group(uid: int) -> bool:
    try:
        await user_client(functions.channels.GetParticipantRequest(
            channel=chat_id, participant=uid))
        return True
    except:
        return False

async def check_knockdowns(uid: int, username=None,
                           first_name=None, last_name=None) -> tuple[int, str | None]:
    try:
        ent = None
        try:
            ent = await user_client.get_input_entity(uid)
            log.info("‚úÖ %s –Ω–∞–π–¥–µ–Ω –ø–æ user_id", uid)
        except Exception as e1:
            log.debug("‚ùå %s –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ user_id: %s", uid, e1)
            if username:
                try:
                    ent = await user_client.get_input_entity(f"@{username}")
                    log.info("‚úÖ %s –Ω–∞–π–¥–µ–Ω –ø–æ username @%s", uid, username)
                except Exception as e2:
                    log.debug("‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ username: %s", e2)

        if ent is None and first_name and last_name:
            async for u in user_client.iter_participants(chat_id):
                if u.first_name == first_name and u.last_name == last_name:
                    ent = await user_client.get_input_entity(u.id)
                    log.info("‚úÖ %s –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏ %s %s", uid, first_name, last_name)
                    break

        if not ent:
            return -1, None

        if not isinstance(ent, InputUser):
            ent = InputUser(ent.user_id, ent.access_hash)

        cnt, off = 0, ""
        while True:
            res = await user_client(GetUserStarGiftsRequest(
                user_id=ent, offset=off, limit=100))
            for g in res.gifts:
                gift = g.to_dict().get("gift", {})
                if any(a.get("name", "").lower() == "knockdown"
                       for a in gift.get("attributes", [])):
                    cnt += 1
            if not res.next_offset:
                break
            off = res.next_offset

        log.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è %s ‚Üí %s knockdown", uid, cnt)
        return cnt, getattr(ent, "username", None)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ check_knockdowns")
        return -1, None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(commands=["start"])
def start_message(msg):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="check_gifts"))
    bot.send_message(msg.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–Ω–∏–º—É–º 6 knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∞–Ω—Ç–∏-—Å–ø–∞–º –∫–Ω–æ–ø–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_last_click: dict[int, float] = {}

@bot.callback_query_handler(func=lambda c: c.data == "check_gifts")
def handle_check(call):
    now = time.time()
    if now - _last_click.get(call.from_user.id, 0) < CLICK_COOLDOWN:
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶"); return
    _last_click[call.from_user.id] = now

    asyncio.run_coroutine_threadsafe(check_queue.put(call), main_loop)
    bot.send_message(call.message.chat.id,
                     "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏‚Ä¶")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ worker –æ—á–µ—Ä–µ–¥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def process_queue():
    while True:
        call = await check_queue.get()
        try:
            uid, uname = call.from_user.id, call.from_user.username
            fname, lname = call.from_user.first_name, call.from_user.last_name
            now = datetime.now(timezone.utc)

            if await is_user_in_group(uid):
                bot.send_message(call.message.chat.id, "‚úÖ –¢—ã —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ! –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.")
                await asyncio.sleep(DELAY); continue

            user = get_approved_user(uid)
            if user:
                invite_link, created_at = user[2], user[3]
                cnt, _ = await check_knockdowns(uid, uname, fname, lname)

                if cnt < 6 or cnt == -1:
                    bot.send_message(call.message.chat.id,
                        "‚ùå –°–µ–π—á–∞—Å —É —Ç–µ–±—è –º–µ–Ω—å—à–µ 6 knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.")
                    await asyncio.sleep(DELAY); continue

                if invite_link and created_at and \
                   (now - created_at.replace(tzinfo=timezone.utc)) < timedelta(minutes=15):
                    bot.send_message(call.message.chat.id,
                        f"üîÅ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{invite_link}")
                    await asyncio.sleep(DELAY); continue

                try:
                    inv = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
                    bot.send_message(call.message.chat.id,
                        f"üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{inv.invite_link}")
                    save_approved(uid, uname, cnt, inv.invite_link)
                    log.info("‚úîÔ∏è %s –ø—Ä–∏–≥–ª–∞—à—ë–Ω, %s knockdown", uid, cnt)
                    await asyncio.sleep(DELAY); continue
                except Exception as e:
                    bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")
                    await asyncio.sleep(DELAY); continue

            cnt, _ = await check_knockdowns(uid, uname, fname, lname)
            if cnt >= 6 and cnt != -1:
                inv = bot.create_chat_invite_link(chat_id=chat_id, member_limit=1)
                bot.send_message(call.message.chat.id,
                    f"‚úÖ –£ —Ç–µ–±—è {cnt} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤ ‚Äî –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!\n{inv.invite_link}")
                save_approved(uid, uname, cnt, inv.invite_link)
                log.info("‚úîÔ∏è %s –ø—Ä–∏–≥–ª–∞—à—ë–Ω, %s knockdown", uid, cnt)
            else:
                bot.send_message(call.message.chat.id,
                    f"‚ùå –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {cnt if cnt!=-1 else 0} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
                    "–ö—É–ø–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞ @mrkt.")
        except Exception:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            log.exception("–û—à–∏–±–∫–∞ –≤ worker")
        await asyncio.sleep(DELAY)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ background loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def start_async():
    main_loop.create_task(init_userbot())
    main_loop.create_task(process_queue())
    main_loop.run_forever()

threading.Thread(target=start_async, daemon=True).start()

log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (userbot + –æ–¥–∏–Ω –ø–æ—Ç–æ–∫, 409 –Ω–µ—Ç)")
bot.infinity_polling(timeout=10, long_polling_timeout=5)