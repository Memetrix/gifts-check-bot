import os
import telebot
import asyncio
import traceback
from telethon import TelegramClient
from telethon.tl.types import InputUser, InputUserSelf
from get_user_star_gifts_request import GetUserStarGiftsRequest

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(bot_token)
bot.skip_pending = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤ —É username
def check_knockdowns(username: str) -> str:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    async def run():
        async with TelegramClient("userbot_session", api_id, api_hash) as client:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if username:
                entity = await client.get_input_entity(username)
            else:
                entity = InputUserSelf()

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ InputUser (–∞ –Ω–µ User)
            if not isinstance(entity, InputUser):
                entity = InputUser(entity.user_id, entity.access_hash)

            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥–∞—Ä–∫–æ–≤
            result = await client(GetUserStarGiftsRequest(user_id=entity, offset="", limit=100))

            knockdown_count = 0
            for g in result.gifts:
                data = g.to_dict()
                gift_data = data.get("gift")
                if not gift_data or "title" not in gift_data or "slug" not in gift_data:
                    continue
                for attr in gift_data.get("attributes", []):
                    if "name" in attr and attr["name"].lower() == "knockdown":
                        knockdown_count += 1
                        break

            if knockdown_count >= 6:
                return f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} {knockdown_count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!"
            else:
                return f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Ç–æ–ª—å–∫–æ {knockdown_count} knockdown-–ø–æ–¥–∞—Ä–∫–æ–≤. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 6."

    return loop.run_until_complete(run())

# /start
@bot.message_handler(commands=["start"])
def start_message(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="ask_username"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –ø–æ–¥–∞—Ä–∫–∏ üéÅ", reply_markup=markup)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç —Å username
@bot.message_handler(func=lambda message: True)
def handle_username(message):
    username = message.text.strip()
    if not username.startswith("@"):
        bot.send_message(message.chat.id, "‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
        return

    try:
        response = check_knockdowns(username)
        bot.send_message(message.chat.id, response)
    except Exception:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤.")
        traceback.print_exc()

print("ü§ñ MVP –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
bot.infinity_polling(timeout=10, long_polling_timeout=5)
